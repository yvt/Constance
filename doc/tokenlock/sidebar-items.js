initSidebarItems({"macro":[["impl_singleton_token_factory","Implement [`SingletonTokenFactory`] on a given type."]],"struct":[["BadTokenError","Error type returned when a key ([`Token`]) doesnâ€™t fit in a keyhole ([`TokenLock::keyhole`])."],["SingletonToken","A singleton unforgeable token used to access the contents of a `TokenLock`."],["SingletonTokenExhaustedError","Error type returned when [`SingletonToken::new`] was called, but a token has already been issued, and a new one cannot be issued until the old one is returned to the factory by dropping [`SingletonTokenGuard`]."],["SingletonTokenGuard","The RAII guard for a [`SingletonToken`] obtained through [`SingletonToken::new`]. Returns the token to the factory automatically when dropped."],["SingletonTokenId","Token that cannot be used to access the contents of a `TokenLock`, but can be used to create a new `TokenLock`."],["SingletonTokenRef","Zero-sized logical equivalent of `&'a `[`SingletonToken`]`<Tag>`."],["SingletonTokenRefMut","Zero-sized logical equivalent of `&'a mut `[`SingletonToken`]`<Tag>`."],["TokenLock","A mutual exclusive primitive that can be accessed using a [`Token`]`<Keyhole>` with a very low overhead."],["UnsyncTokenLock","Like [`TokenLock`], but the usable [`Token`]s are constrained by [`Unsync`]. This subtle difference allows it to be `Sync` even if `T` is not."]],"trait":[["SingletonTokenFactory","Associates a type with a flag indicating whether an instance of [`SingletonToken`]`<Self>` is present."],["Token","Trait for an unforgeable token used to access the contents of a [`TokenLock`]`<_, Keyhole>`."],["Unsync","Asserts the types implementing this trait are `!`[`Sync`]. (Negative bounds are not supported by the compiler at the point of writing, so this trait must be implemented manually.)"]],"type":[["UnsyncSingletonToken","The `!Sync` variant of [`SingletonToken`]."],["UnsyncSingletonTokenGuard","The `!Sync` variant of [`SingletonTokenGuard`]."],["UnsyncSingletonTokenRef","Zero-sized logical equivalent of `&'a `[`UnsyncSingletonToken`]`<Tag>`. The `!Sync` variant of [`SingletonTokenRef`]."],["UnsyncSingletonTokenRefMut","Zero-sized logical equivalent of `&'a mut `[`UnsyncSingletonToken`]`<Tag>`. The `!Sync` variant of [`SingletonTokenRefMut`]."]]});